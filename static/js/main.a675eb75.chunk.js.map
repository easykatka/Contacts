{"version":3,"sources":["components/CopyToClipboardText/index.js","constants/index.js","store/index.js","pages/Contacts/ContactsTable/index.js","pages/Contacts/SearchPanel/index.js","pages/Contacts/ContactsCards/index.js","pages/Contacts/ToggleDataViewMode/index.js","pages/Contacts/Header/index.js","pages/Contacts/useDebounce.js","pages/Contacts/Statistic/index.js","pages/Contacts/useStatictic.js","pages/Contacts/index.js","pages/Contacts/useContacts.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","textTransform","color","whiteSpace","textAlign","icon","marginRight","spacing","black","fontWeight","STATUS_COPY","TITLE_BY_STATUS","CopyToClipboardtext","blackcolor","text","useCopyToClipboard","copyToClipboard","classes","useState","statusCopy","setStatusCopy","onClickCopy","useCallback","onClickAway","ClickAwayListener","Tooltip","title","arrow","placement","Button","className","onClick","DATA_VIEW_MODE","GENDER","NATIONALITY","NATIONALITY_HUMAN_NAME","NATIONALITY_HUMAN_COLOR","users","isLoading","isError","filter","searchText","gender","nationality","dataViewMode","localStorage","getItem","currentPage","sortType","getContacts","a","fetch","response","json","results","error","Error","runInAction","makeAutoObservable","this","page","nat","mode","table","row","padding","marginLeft","small","borderRadius","name","fontSize","minWidth","ContactsTable","data","TableContainer","component","Paper","data-testid","Table","aria-label","TableHead","TableRow","TableCell","TableSortLabel","TableBody","map","item","hover","size","Avatar","alt","src","picture","thumbnail","Typography","first","last","format","parseISO","dob","date","age","email","phone","location","country","street","number","align","variant","style","borderColor","store","login","uuid","searchBlock","marginTop","paddingBottom","input_item","maxHeight","width","clear_btn","height","paper","SearchPanel","observer","Grid","container","xs","sm","md","xl","OutlinedInput","value","onChange","e","setSearchText","target","placeholder","endAdornment","InputAdornment","FormControl","InputLabel","id","Select","label","setGender","MenuItem","setNat","fullWidth","card","minHeight","avatar","margin","ContactsCards","lg","Card","CardContent","ToggleDataViewMode","ToggleButtonGroup","orientation","exclusive","_","nextView","setViewMode","ToggleButton","headContainer","refresh_button","Header","Box","display","justifyContent","IconButton","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","toLowerCase","predominate","backgroundColor","grey","borderBottom","natCollection","Statistic","reduce","acc","collectionSize","males","females","indeterminate","fullNational","noWrap","Object","keys","sort","i","content","marginBottom","Contacts","debouncedText","debouncedNationality","result","setResult","user","includes","sortedUsers","b","localeCompare","sortFunc","pagesCount","Math","ceil","length","indexOfLastPage","indexOfFistPage","currentUsers","slice","setCurrentPage","setItem","useFilter","handleChange","Container","Pagination","count","LinearProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a675eb75.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport propsTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { useCopyToClipboard } from \"react-use\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n\t  cursor: \"pointer\",\r\n\t  textTransform: \"none\",\r\n\t  color : 'dodgerBlue',\r\n\t  whiteSpace: \"pre-line\",\r\n\t  textAlign:'left'\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(1),\r\n\t},\r\n\tblack:{\r\n\tcolor:'black',\r\n\tfontWeight:400}\r\n  })\r\n);\r\nconst STATUS_COPY = {\r\n  COPY: \"copy\",\r\n  COPIED: \"copied\",\r\n};\r\nconst TITLE_BY_STATUS = {\r\n\t[STATUS_COPY.COPY] : 'Copy',\r\n\t[STATUS_COPY.COPIED]: 'Copied'\r\n}\r\n\r\nexport const CopyToClipboardtext = ({blackcolor, text }) => {\r\n  const [, copyToClipboard] = useCopyToClipboard();\r\n  const classes = useStyles();\r\n  const [statusCopy, setStatusCopy] = useState(STATUS_COPY.COPY);\r\n\r\n  const onClickCopy = useCallback(() => {\r\n    copyToClipboard(text);\r\n    setStatusCopy(STATUS_COPY.COPIED);\r\n  }, [copyToClipboard ,text]);\r\n\r\n  const onClickAway = useCallback(() => {\r\n    setStatusCopy(STATUS_COPY.COPY);\r\n  }, [setStatusCopy]);\r\n  return (\r\n    <ClickAwayListener onClickAway={onClickAway}>\r\n      <Tooltip title={TITLE_BY_STATUS[statusCopy]} arrow placement=\"top\">\r\n        <Button  className={classes.root} onClick={onClickCopy}>\r\n          <FileCopyOutlinedIcon  className={classes.icon} />\r\n\t\t  <div className={blackcolor ? `${classes.black}` : null}>\r\n          {text}\r\n\t\t  </div>\r\n        </Button>\r\n      </Tooltip>\r\n    </ClickAwayListener>\r\n  );\r\n};\r\n\r\nCopyToClipboardtext.propTypes = {\r\n  text: propsTypes.string.isRequired,\r\n};\r\n","export const DATA_VIEW_MODE = {\r\n\tTABLE: \"table\",\r\n\tGRID: \"grid\",\r\n  };\r\n  export const GENDER = {\r\n\tALL: \"all\",\r\n\tMALE: \"male\",\r\n\tFEMALE:\"female\"\r\n  };\r\n  export const NATIONALITY = {\r\n\tAU: \"AU\",\r\n\tBR: \"BR\",\r\n\tCA: \"CA\",\r\n\tCH: \"CH\",\r\n\tDE: \"DE\",\r\n\tDK: \"DK\",\r\n\tES: \"ES\",\r\n\tFI: \"FI\",\r\n\tFR: \"FR\",\r\n\tGB: \"GB\",\r\n\tIE: \"IE\",\r\n\tIR: \"IR\",\r\n\tNO: \"NO\",\r\n\tNL: \"NL\",\r\n\tNZ: \"NZ\",\r\n\tTR: \"TR\",\r\n\tUS: \"US\"\r\n  };\r\n  \r\n  export const NATIONALITY_HUMAN_NAME = {\r\n\t  [NATIONALITY.AU]: \"Australian\",\r\n\t  [NATIONALITY.BR]: \"Brazilian\",\r\n\t  [NATIONALITY.CA]: \"Canadian\",\r\n\t  [NATIONALITY.CH]: \"Chinese\",\r\n\t  [NATIONALITY.DE]: \"German\",\r\n\t  [NATIONALITY.DK]: \"Danish\",\r\n\t  [NATIONALITY.ES]: \"Spanish\",\r\n\t  [NATIONALITY.FI]: \"Finn\",\r\n\t  [NATIONALITY.FR]: \"French\",\r\n\t  [NATIONALITY.GB]: \"British\",\r\n\t  [NATIONALITY.IE]: \"Irish\",\r\n\t  [NATIONALITY.IR]: \"Iranian\",\r\n\t  [NATIONALITY.NO]: \"Norwegian\",\r\n\t  [NATIONALITY.NL]: \"Netherlander\",\r\n\t  [NATIONALITY.NZ]: \"New Zealander\",\r\n\t  [NATIONALITY.TR]: \"Turkish\",\r\n\t  [NATIONALITY.US]: \"American\"\r\n  \r\n  }\r\n  export const NATIONALITY_HUMAN_COLOR = {\r\n\t  [NATIONALITY.AU]: \"#9F1B69\",\r\n\t  [NATIONALITY.BR]: \"#E864B2\",\r\n\t  [NATIONALITY.CA]: \"#4461EC\",\r\n\t  [NATIONALITY.CH]: \"#51C453\",\r\n\t  [NATIONALITY.DE]: \"#33C5C9\",\r\n\t  [NATIONALITY.DK]: \"#F98C39\",\r\n\t  [NATIONALITY.ES]: \"#FA7F56\",\r\n\t  [NATIONALITY.FI]: \"#2B94FF\",\r\n\t  [NATIONALITY.FR]: \"#9F1B69\",\r\n\t  [NATIONALITY.GB]: \"#E864B2\",\r\n\t  [NATIONALITY.IE]: \"#4461EC\",\r\n\t  [NATIONALITY.IR]: \"#51C453\",\r\n\t  [NATIONALITY.NO]: \"#33C5C9\",\r\n\t  [NATIONALITY.NL]: \"#F98C39\",\r\n\t  [NATIONALITY.NZ]: \"#FA7F56\",\r\n\t  [NATIONALITY.TR]: \"#2B94FF\",\r\n\t  [NATIONALITY.US]: \"#9F1B69\"\r\n  \r\n  }","import { runInAction, makeAutoObservable } from \"mobx\";\r\nimport { GENDER, DATA_VIEW_MODE } from \"../constants\";\r\nclass Store {\r\n  users = [];\r\n  isLoading = true;\r\n  isError = false;\r\n  //фильтры\r\n  filter = {\r\n    searchText:\"\" ,\r\n    gender: GENDER.ALL,\r\n    nationality:\"\" ,\r\n  };\r\n  //датавью\r\n  dataViewMode = localStorage.getItem(\"dataViewMode\") || DATA_VIEW_MODE.TABLE;\r\n  currentPage = 1;\r\n  //сортировка\r\n  sortType = \"default\"\r\n  \r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  getContacts = async () => {\r\n    try {\r\n      this.isLoading = true\r\n      const response = await fetch(\"https://randomuser.me/api/?results=50\");\r\n      const { results, error } = await response.json();\r\n      if (error) {\r\n        throw new Error();\r\n      }\r\n      runInAction(() => {\r\n        this.users = results;\r\n        this.isError = false;\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => (this.isError = true));\r\n    } finally {\r\n\t  runInAction(() => (this.isLoading = false))}}\r\n\t  \r\n\tsetCurrentPage(page) {this.currentPage = page};\r\n\tsetSearchText(text) {this.filter.searchText = text};\r\n\tsetGender(gender) {this.filter.gender = gender}\r\n\tsetNat(nat) {this.filter.nationality = nat}\r\n\tsetViewMode(mode) {this.dataViewMode = mode}\r\n\t\r\n}\r\nexport default new Store();\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport {TableSortLabel,\r\n  Table,\r\n  TableBody,\r\n  Button,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\nimport {\r\n  NATIONALITY_HUMAN_NAME,\r\n  NATIONALITY_HUMAN_COLOR,\r\n} from \"../../../constants\";\r\nimport store from \"../../../store\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {},\r\n  row: {\r\n    \"&>*:not(img)\": {\r\n      padding: theme.spacing(1 / 2),\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n   \r\n    borderRadius: \"50%\",\r\n  },\r\n  name: {\r\n    color: \"dodgerBlue\",\r\n  },\r\n  nat: {textTransform:'none',\r\n  fontSize:11 ,\r\n  minWidth:theme.spacing(10)\r\n  }\r\n}))\r\n\r\nexport const ContactsTable = ({ data }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Paper} data-testid=\"contacts-table-container\">\r\n      <Table className={classes.table} aria-label=\"contacts table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Avatar</TableCell>\r\n\t\t\t<TableCell> <TableSortLabel>Full name</TableSortLabel></TableCell>\r\n            <TableCell>Birthday</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Phone</TableCell>\r\n            <TableCell>Location</TableCell>\r\n            <TableCell>Nationality</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((item) => (\r\n            <TableRow hover={true} size=\"small\" key={item.login.uuid} className={classes.row}>\r\n              <TableCell>\r\n                <Avatar\r\n                  className={classes.small}\r\n                  alt=\"\"\r\n                  src={item.picture.thumbnail}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography className={classes.name}>\r\n                  {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>\r\n                  {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}{\" \"}\r\n                </Typography>\r\n                <Typography>{`${item.dob.age} years`}</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.email} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.phone} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext\r\n                  blackcolor={true}\r\n                  text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`}\r\n                />\r\n              </TableCell>\r\n              <TableCell  align=\"right\" >\r\n\t\t\t\t<Button \r\n\t\t\t\tvariant='outlined'\r\n\t\t\t\t\t style={{ borderColor:NATIONALITY_HUMAN_COLOR[item.nat], color: NATIONALITY_HUMAN_COLOR[item.nat] }}\r\n                  onClick={() =>\r\n                    (store.filter.nationality =\r\n                      NATIONALITY_HUMAN_NAME[item.nat])\r\n                  }\r\n                  className={classes.nat}\r\n                ><span  className={classes.nat}>\r\n                  {NATIONALITY_HUMAN_NAME[item.nat]}\r\n\t\t\t\t  </span>\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport {MenuItem,InputLabel,FormControl,Select,OutlinedInput,InputAdornment,Button,Grid,Paper} from \"@material-ui/core\"\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport store from \"../../../store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { GENDER } from \"../../../constants\";\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n\tsearchBlock: {\r\n\t\tmarginTop:theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  input_item: { maxHeight:theme.spacing(5) ,minWidth: theme.spacing(40), width: \"100%\" },\r\n  clear_btn: {\r\n    height: theme.spacing(5),\r\n  },\r\n  paper: {\r\n\twidth: \"100%\",\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n//body\r\nexport const SearchPanel = observer(() => {\r\n  const classes = useStyles();\r\n  const { filter } = store;\r\n  return (\r\n    <Grid container className={classes.searchBlock}>\r\n      <Paper variant='outlined' className={classes.paper}>\r\n        <Grid container spacing={3}>\r\n          {/* поиск по имени */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n\t\t\t  value={filter.searchText}\r\n              onChange={e => store.setSearchText(e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Search by name\"\r\n              endAdornment={<InputAdornment>\r\n                \t\t\t  <SearchIcon />\r\n                \t\t\t</InputAdornment>}/>\r\n          </Grid>\r\n          {/* выбор пола */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4} >\r\n            <FormControl variant=\"outlined\"className={classes.input_item} >\r\n              <InputLabel id=\"gender\">Gender</InputLabel>\r\n              <Select className={classes.input_item}\r\n                id=\"gender\"\r\n                label=\"gender\"\r\n\t\t\t\tvalue={filter.gender}\r\n                onChange={e => store.setGender(e.target.value)}\r\n              >\r\n                <MenuItem  value={GENDER.ALL}>All</MenuItem>\r\n                <MenuItem  value={GENDER.MALE}>Male</MenuItem>\r\n                <MenuItem  value={GENDER.FEMALE}>Female</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          {/* поиск по национальности*/}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n              value={filter.nationality}\r\n              onChange={e => store.setNat(e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Search by nationality\"\r\n            />\r\n          </Grid>\r\n          {/* кнопка очистки инпутов */}\r\n          <Button\r\n\t\t\tfullWidth\r\n            className={classes.clear_btn}\r\n\t\t\tonClick={() => {store.setSearchText(\"\");\r\n\t\t\t\t\t\t\tstore.setGender(GENDER.ALL);\r\n\t\t\t\t\t\t\tstore.setNat(\"\")}}>\r\n            Clear\r\n          </Button>\r\n          {/* закрывающие теги */}\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n});\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Card,\r\n  Avatar,\r\n  Typography,\r\n  CardContent,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\nimport {\r\n  NATIONALITY_HUMAN_COLOR,\r\n  NATIONALITY_HUMAN_NAME,\r\n} from \"../../../constants\";\r\nimport store from \"../../../store\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    whiteSpace: \"pre-line\",\r\n    minHeight: theme.spacing(20),\r\n    textAlign: \"center\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(15),\r\n    height: theme.spacing(15),\r\n    margin: \"0 auto\",\r\n  },\r\n  nat: { textTransform: \"none\", minWidth: theme.spacing(15) },\r\n}));\r\nexport const ContactsCards = ({ data }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container className={classes.card} data-testid=\"contacts-grid-container\">\r\n      {data.map((item) => (\r\n        <Grid item xs={12} lg={3} sm={6} key={item.login.uuid}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <Avatar\r\n                variant=\"rounded\"\r\n                src={item.picture.thumbnail}\r\n                className={classes.avatar}\r\n              ></Avatar>\r\n              <Typography>\r\n                {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n              </Typography>\r\n              <Button\r\n                className={classes.nat}\r\n                onClick={() =>\r\n                  (store.filter.nationality = NATIONALITY_HUMAN_NAME[item.nat])\r\n                }\r\n                style={{\r\n                  borderColor: NATIONALITY_HUMAN_COLOR[item.nat],\r\n                  color: NATIONALITY_HUMAN_COLOR[item.nat],\r\n                }}\r\n              >\r\n                {NATIONALITY_HUMAN_NAME[item.nat]}\r\n              </Button>\r\n              <Typography>\r\n                {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}\r\n              </Typography>\r\n              <Typography>{`${item.dob.age} years`}</Typography>\r\n              <Typography>\r\n                <CopyToClipboardtext text={item.email} />{\" \"}\r\n              </Typography>\r\n              <CopyToClipboardtext text={item.phone} />\r\n              <Typography>\r\n                <CopyToClipboardtext\r\n                  blackcolor={true}\r\n                  text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n","import ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport { DATA_VIEW_MODE } from \"../../../constants\";\r\nimport store from '../../../store'\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport const ToggleDataViewMode = observer( () => {\r\n\t\r\n  //body\r\n\r\n\r\n  return (\r\n    <ToggleButtonGroup size='small'\r\n      orientation=\"horizontal\"\r\n\t  value={store.dataViewMode}\r\n\t  exclusive\r\n      onChange={  (_, nextView) => {if (nextView) {store.setViewMode(nextView)}}} >\r\n\t\t\t  <ToggleButton\r\n        value={DATA_VIEW_MODE.TABLE}\r\n\t\taria-label={DATA_VIEW_MODE.TABLE}\r\n\t\tdata-testid={\"toggle-data-view-mode-table\"}\r\n      >\r\n        <ViewListIcon />\r\n      </ToggleButton>\r\n      <ToggleButton\r\n\t\tvalue={DATA_VIEW_MODE.GRID}\r\n\t\taria-label={DATA_VIEW_MODE.GRID}\r\n\t\tdata-testid={\"toggle-data-view-mode-grid\"}\r\n      >\r\n        <ViewModuleIcon />\r\n      </ToggleButton>\r\n\r\n    </ToggleButtonGroup>\r\n  );\r\n}\r\n)\r\n","import RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport store from \"../../../store\";\r\nimport { ToggleDataViewMode } from \"../ToggleDataViewMode\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    headContainer: {\r\n      marginTop: theme.spacing(2),\r\n\t},\r\n\trefresh_button: {\r\n\t\tmarginRight: theme.spacing(1),\r\n\t  },\r\n  })\r\n);\r\nexport const Header = () => {\r\n\tconst classes = useStyles();\r\n  const { getContacts } = store;\r\n  return (\r\n    <Grid item xs={12}\r\n      className={classes.headContainer} >\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          Contacts\r\n        </Typography>\r\n        <Box display=\"flex\">\r\n          <IconButton\r\n            className={classes.refresh_button}\r\n            aria-label=\"refresh\"\r\n            onClick={() => getContacts()}\r\n          >\r\n            <RefreshIcon />\r\n          </IconButton>\r\n          <ToggleDataViewMode />\r\n        </Box>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n};\r\n","import {useState,useEffect} from 'react'\r\n\r\n\r\nexport const useDebounce = (value, delay)  => { debugger\r\n\t// State and setters for debounced value\r\n\tconst [debouncedValue, setDebouncedValue] = useState(value);\r\n\tuseEffect(\r\n\t  () => {\r\n\t\tconst handler = setTimeout(() => {\r\n\t\t  setDebouncedValue(value);\r\n\t\t}, delay);\r\n\t\treturn () => {\r\n\t\t  clearTimeout(handler);\r\n\t\t};\r\n\t  },\r\n\t  [value, delay] \r\n\t)\r\n\treturn debouncedValue.toLowerCase();}","import { useStatistic } from \"../useStatictic\";\r\nimport {\r\n  Paper,\r\n  Grid,\r\n  TableHead,\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Table,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n\tpadding: theme.spacing(3),\r\n\r\n  },\r\n  predominate: {\r\n    fontWeight: 500,\r\n    backgroundColor: \"yellow\",\r\n    marginLeft: theme.spacing(19),\r\n  },\r\n  grey:{\"&>*\": {color: \"grey\" ,borderBottom:'none',  }},\r\n  natCollection:{\r\n\tjustifyContent:'center',\r\n\t\"& >*\": {whiteSpace: \"pre\" , \"&>*\":{justifyContent:'center'} }\r\n  }\r\n}));\r\nexport const Statistic = () => {\r\n  const [\r\n    { males, females, collectionSize, indeterminate, natCollection },\r\n  ] = useStatistic();\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" className={classes.paper}>\r\n      <Typography variant=\"h6\">Statistic</Typography>\r\n      <Grid container>\r\n        <Grid item xs={5}>\r\n          <Table >\r\n            <TableHead >\r\n              <TableRow className={classes.grey}>\r\n                <TableCell > Collection Size</TableCell>\r\n                <TableCell> Male</TableCell>\r\n                <TableCell> Females</TableCell>\r\n                <TableCell> Indeterminate</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell> {collectionSize}</TableCell>\r\n                <TableCell> {males}</TableCell>\r\n                <TableCell> {females}</TableCell>\r\n                <TableCell> {indeterminate}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n          <Typography noWrap display=\"inline\" className={classes.predominate}>\r\n            {males === females\r\n              ? null\r\n              : males > females\r\n              ? \"Men predominate\"\r\n              : \"Women predominate\"}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container className={classes.natCollection}>\r\n          <Grid>\r\n            <Typography  style={{color : 'grey'}} >Nationalities</Typography>\r\n          </Grid>\r\n          <Grid container>\r\n            {Object.keys(natCollection).sort().map((i) => (\r\n              <Grid  key={i} item xs={12} sm={6} md={4} lg={3}>\r\n                <span style={{\tfontWeight:800}}>{i}</span>\r\n                <span>\r\n\t\t\t\t\t{natCollection[i] === 1 ?\r\n\t\t\t\t\t  `  ${natCollection[i]} contact` \r\n\t\t\t\t\t :\r\n\t\t\t\t\t  `  ${natCollection[i]} contacts` }\t\r\n\t\t\t\t\t</span>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n","import store from '../../store'\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../constants\"\r\nexport const useStatistic = () => {\r\n \r\n// получение числа людей в коллекции, разбивка по полу и нации\r\nconst getStatictic = store.users.reduce(\r\n    (acc, value) => {\r\n      acc.collectionSize += 1;\r\n      if (value.gender === \"male\") {\r\n        acc.males += 1;\r\n      } else if (value.gender === \"female\") {\r\n        acc.females += 1;\r\n      } else {\r\n        acc.indeterminate += 1;\r\n      }\r\n      const fullNational = NATIONALITY_HUMAN_NAME[value.nat] || value.nat;\r\n      if (!acc.natCollection[fullNational]) {\r\n        acc.natCollection[fullNational] = 1;\r\n      } else {\r\n        acc.natCollection[fullNational] += 1;\r\n      }\r\n      return acc;\r\n    },\r\n    {\r\n      collectionSize: 0,\r\n      males: 0,\r\n      females: 0,\r\n      indeterminate: 0,\r\n      natCollection: [],\r\n    },\r\n  )\r\n\r\nreturn [getStatictic]\r\n}","import { Grid, Container, LinearProgress } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport { ContactsTable } from \"./ContactsTable\";\r\nimport { DATA_VIEW_MODE } from \"../../constants\";\r\nimport { SearchPanel } from \"./SearchPanel\";\r\nimport store from \"../../store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ContactsCards } from \"./ContactsCards\";\r\nimport { Header } from \"./Header\";\r\nimport { useFilter } from \"./useContacts\";\r\nimport { Statistic } from \"./../Contacts/Statistic\";\r\n// styles\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: { \"&>*\": { justifyContent: \"center\" } },\r\n    headContainer: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    content: {\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n  })\r\n);\r\n//body\r\nexport const Contacts = observer(() => {\r\n  const classes = useStyles();\r\n  const { isLoading, isError, dataViewMode, currentPage } = store;\r\n  const [currentUsers, pagesCount, handleChange] = useFilter();\r\n\r\n  //render\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Grid container>\r\n        <Header />\r\n        <Grid item xs={12}>\r\n          <SearchPanel />\r\n        </Grid>\r\n        <Pagination\r\n          page={currentPage}\r\n          onChange={handleChange}\r\n          count={pagesCount}\r\n        />\r\n        <Grid item xs={12} className={classes.content}>\r\n          {isLoading ? (\r\n            <LinearProgress data-testid=\"contacts-loader\" />\r\n          ) : isError ? (\r\n            <div data-testid=\"contacts-error\"> Fetch Error </div>\r\n          ) : dataViewMode === DATA_VIEW_MODE.TABLE ? (\r\n            <ContactsTable data={currentUsers} />\r\n          ) : (\r\n            <ContactsCards data={currentUsers} />\r\n          )}\r\n        </Grid>\r\n        {isLoading === false ? <Statistic /> : null}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n});\r\n","\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../constants\";\r\nimport store from \"../../store\";\r\nimport { useEffect ,useState  } from \"react\";\r\nimport {useDebounce} from \"./useDebounce\"\r\n\r\nexport const useFilter = () => { debugger\r\nconst {users ,filter , currentPage ,sortType} = store\r\n// debounce\r\nconst debouncedText = useDebounce(filter.searchText, 500);\r\nconst debouncedNationality = useDebounce(filter.nationality,500)\r\n//отфильтрованный результат\r\nconst [result, setResult] = useState([]);\r\n\r\n// функция фильтра\r\nuseEffect(() => {\r\n\t\tsetResult (users\r\n\t\t\t.filter((user) => filter.gender === \"all\" || user.gender === filter.gender)\r\n\t\t\t.filter((user) => { if ((user.name.first + \" \" + user.name.last).toLowerCase().includes(debouncedText)) return true;\r\n\t\t\t  return false;})\r\n\t\t\t.filter((user) => { if (NATIONALITY_HUMAN_NAME[user.nat].toLowerCase().includes(debouncedNationality)) return true;\r\n\t\t\t  return false;\r\n\t\t  }))\r\n}, [debouncedText,debouncedNationality,filter.gender])\r\n//\r\nuseEffect(() => {\r\n\tsetResult(users)\r\n},[users])\r\n\r\n// TODO добить сортировку по имени\r\nconst sortFunc  = () =>\t  {\r\n\tswitch (sortType) {\r\n\t\t\tcase \"asc\":\r\n\t\t\treturn [...result].sort((a, b) => a.name.first.localeCompare(b.name.first));\r\n\t\t\tcase \"desc\":\r\n\t\t\treturn [...result].sort((a, b) => b.name.first.localeCompare(a.name.first));\r\n\t\t\tdefault : return result\r\n\t}}\r\n\tconst sortedUsers = sortFunc()\r\n\r\n// фильтр по страницам\r\nconst pageSize = 8;\r\nconst pagesCount = Math.ceil(sortedUsers.length/pageSize)\r\nconst indexOfLastPage = currentPage * pageSize\r\nconst indexOfFistPage = indexOfLastPage - pageSize\r\nconst currentUsers = sortedUsers.slice(indexOfFistPage,indexOfLastPage)\r\n//сброс на первую страницу,если изменился фильтр\r\nuseEffect(()=> {\r\n\tstore.setCurrentPage(1)\r\n},[result])\r\n// фетч при первом рендере\r\nuseEffect(() => {\r\n\tstore.getContacts();\r\n  }, []);\r\n  // сетить в локал сторадж\r\n  useEffect(() => {\r\n\tlocalStorage.setItem('dataViewMode',store.dataViewMode) \r\n});\r\n// хендер изменения номера страницы\r\n  const handleChange = (_, value) => {\r\n\tstore.setCurrentPage(value)\r\n  };\r\n\r\nreturn [currentUsers,pagesCount,handleChange]\r\n}","import {Contacts} from \"./pages/Contacts\";\r\n\r\nexport function App() {\r\n  return (\r\n    <div>\r\n\t\r\n      <Contacts/>\r\n\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\nreportWebVitals();\r\n"],"sourceRoot":""}