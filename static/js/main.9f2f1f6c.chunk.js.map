{"version":3,"sources":["components/CopyToClipboardText/index.js","constants/index.js","store/index.js","pages/Contacts/ContactsTable/index.js","pages/Contacts/SearchPanel/index.js","pages/Contacts/ContactsCards/index.js","pages/Contacts/ToggleDataViewMode/index.js","pages/Contacts/Header/index.js","pages/Contacts/useDebounce.js","pages/Contacts/Statistic/index.js","pages/Contacts/useStatictic.js","pages/Contacts/index.js","pages/Contacts/useFilter.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","textTransform","color","whiteSpace","textAlign","icon","marginRight","spacing","black","fontWeight","STATUS_COPY","TITLE_BY_STATUS","CopyToClipboardtext","blackcolor","text","useCopyToClipboard","copyToClipboard","classes","useState","statusCopy","setStatusCopy","onClickCopy","useCallback","onClickAway","ClickAwayListener","Tooltip","title","arrow","placement","Button","className","onClick","DATA_VIEW_MODE","GENDER","NATIONALITY","NATIONALITY_HUMAN_NAME","NATIONALITY_HUMAN_COLOR","users","isLoading","isError","filter","searchText","gender","nationality","dataViewMode","localStorage","getItem","currentPage","orderBy","order","hideSortIcon","getContacts","a","fetch","response","json","results","error","Error","runInAction","makeAutoObservable","this","page","nat","mode","table","row","padding","marginLeft","small","borderRadius","name","fontSize","minWidth","ContactsTable","data","orderHandler","TableContainer","component","Paper","data-testid","Table","aria-label","TableHead","TableRow","TableCell","TableSortLabel","store","direction","TableBody","map","item","hover","size","Avatar","alt","src","picture","thumbnail","Typography","first","last","format","parseISO","dob","date","age","email","phone","location","country","street","number","align","variant","style","borderColor","setNat","login","uuid","searchBlock","marginTop","paddingBottom","input_item","maxHeight","width","clear_btn","height","paper","SearchPanel","observer","Grid","container","xs","sm","md","xl","OutlinedInput","value","onChange","e","setSearchText","target","placeholder","endAdornment","InputAdornment","FormControl","InputLabel","id","Select","label","setGender","MenuItem","fullWidth","card","minHeight","avatar","margin","ContactsCards","lg","Card","CardContent","ToggleDataViewMode","ToggleButtonGroup","orientation","exclusive","_","nextView","setViewMode","ToggleButton","headContainer","refresh_button","Header","Box","display","justifyContent","IconButton","useDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","toLowerCase","predominate","backgroundColor","grey","borderBottom","natCollection","Statistic","reduce","acc","collectionSize","males","females","indeterminate","fullNational","noWrap","Object","keys","sort","i","content","marginBottom","Contacts","debouncedText","debouncedNationality","result","setResult","user","includes","sortedUsers","b","localeCompare","sortFunc","pagesCount","Math","ceil","length","indexOfLastPage","indexOfFistPage","currentUsers","slice","setCurrentPage","setItem","setOrderBy","useFilter","handleChange","Container","Pagination","count","LinearProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f2f1f6c.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport propsTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { useCopyToClipboard } from \"react-use\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n\t  cursor: \"pointer\",\r\n\t  textTransform: \"none\",\r\n\t  color : 'dodgerBlue',\r\n\t  whiteSpace: \"pre-line\",\r\n\t  textAlign:'left'\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(1),\r\n\t},\r\n\tblack:{\r\n\tcolor:'black',\r\n\tfontWeight:400}\r\n  })\r\n);\r\nconst STATUS_COPY = {\r\n  COPY: \"copy\",\r\n  COPIED: \"copied\",\r\n};\r\nconst TITLE_BY_STATUS = {\r\n\t[STATUS_COPY.COPY] : 'Copy',\r\n\t[STATUS_COPY.COPIED]: 'Copied'\r\n}\r\n\r\nexport const CopyToClipboardtext = ({blackcolor, text }) => {\r\n  const [, copyToClipboard] = useCopyToClipboard();\r\n  const classes = useStyles();\r\n  const [statusCopy, setStatusCopy] = useState(STATUS_COPY.COPY);\r\n\r\n  const onClickCopy = useCallback(() => {\r\n    copyToClipboard(text);\r\n    setStatusCopy(STATUS_COPY.COPIED);\r\n  }, [copyToClipboard ,text]);\r\n\r\n  const onClickAway = useCallback(() => {\r\n    setStatusCopy(STATUS_COPY.COPY);\r\n  }, [setStatusCopy]);\r\n  return (\r\n    <ClickAwayListener onClickAway={onClickAway}>\r\n      <Tooltip title={TITLE_BY_STATUS[statusCopy]} arrow placement=\"top\">\r\n        <Button  className={classes.root} onClick={onClickCopy}>\r\n          <FileCopyOutlinedIcon  className={classes.icon} />\r\n\t\t  <div className={blackcolor ? `${classes.black}` : null}>\r\n          {text}\r\n\t\t  </div>\r\n        </Button>\r\n      </Tooltip>\r\n    </ClickAwayListener>\r\n  );\r\n};\r\n\r\nCopyToClipboardtext.propTypes = {\r\n  text: propsTypes.string.isRequired,\r\n};\r\n","export const DATA_VIEW_MODE = {\r\n\tTABLE: \"table\",\r\n\tGRID: \"grid\",\r\n  };\r\n  export const GENDER = {\r\n\tALL: \"all\",\r\n\tMALE: \"male\",\r\n\tFEMALE:\"female\"\r\n  };\r\n  export const NATIONALITY = {\r\n\tAU: \"AU\",\r\n\tBR: \"BR\",\r\n\tCA: \"CA\",\r\n\tCH: \"CH\",\r\n\tDE: \"DE\",\r\n\tDK: \"DK\",\r\n\tES: \"ES\",\r\n\tFI: \"FI\",\r\n\tFR: \"FR\",\r\n\tGB: \"GB\",\r\n\tIE: \"IE\",\r\n\tIR: \"IR\",\r\n\tNO: \"NO\",\r\n\tNL: \"NL\",\r\n\tNZ: \"NZ\",\r\n\tTR: \"TR\",\r\n\tUS: \"US\"\r\n  };\r\n  \r\n  export const NATIONALITY_HUMAN_NAME = {\r\n\t  [NATIONALITY.AU]: \"Australian\",\r\n\t  [NATIONALITY.BR]: \"Brazilian\",\r\n\t  [NATIONALITY.CA]: \"Canadian\",\r\n\t  [NATIONALITY.CH]: \"Chinese\",\r\n\t  [NATIONALITY.DE]: \"German\",\r\n\t  [NATIONALITY.DK]: \"Danish\",\r\n\t  [NATIONALITY.ES]: \"Spanish\",\r\n\t  [NATIONALITY.FI]: \"Finn\",\r\n\t  [NATIONALITY.FR]: \"French\",\r\n\t  [NATIONALITY.GB]: \"British\",\r\n\t  [NATIONALITY.IE]: \"Irish\",\r\n\t  [NATIONALITY.IR]: \"Iranian\",\r\n\t  [NATIONALITY.NO]: \"Norwegian\",\r\n\t  [NATIONALITY.NL]: \"Netherlander\",\r\n\t  [NATIONALITY.NZ]: \"New Zealander\",\r\n\t  [NATIONALITY.TR]: \"Turkish\",\r\n\t  [NATIONALITY.US]: \"American\"\r\n  \r\n  }\r\n  export const NATIONALITY_HUMAN_COLOR = {\r\n\t  [NATIONALITY.AU]: \"#9F1B69\",\r\n\t  [NATIONALITY.BR]: \"#E864B2\",\r\n\t  [NATIONALITY.CA]: \"#4461EC\",\r\n\t  [NATIONALITY.CH]: \"#51C453\",\r\n\t  [NATIONALITY.DE]: \"#33C5C9\",\r\n\t  [NATIONALITY.DK]: \"#F98C39\",\r\n\t  [NATIONALITY.ES]: \"#FA7F56\",\r\n\t  [NATIONALITY.FI]: \"#2B94FF\",\r\n\t  [NATIONALITY.FR]: \"#9F1B69\",\r\n\t  [NATIONALITY.GB]: \"#E864B2\",\r\n\t  [NATIONALITY.IE]: \"#4461EC\",\r\n\t  [NATIONALITY.IR]: \"#51C453\",\r\n\t  [NATIONALITY.NO]: \"#33C5C9\",\r\n\t  [NATIONALITY.NL]: \"#F98C39\",\r\n\t  [NATIONALITY.NZ]: \"#FA7F56\",\r\n\t  [NATIONALITY.TR]: \"#2B94FF\",\r\n\t  [NATIONALITY.US]: \"#9F1B69\"\r\n  \r\n  }","import { runInAction, makeAutoObservable } from \"mobx\";\r\nimport { GENDER, DATA_VIEW_MODE } from \"../constants\";\r\nclass Store {\r\n  users = [];\r\n  isLoading = true;\r\n  isError = false;\r\n  //фильтры\r\n  filter = {\r\n    searchText: \"\",\r\n    gender: GENDER.ALL,\r\n    nationality: \"\",\r\n  };\r\n  //датавью\r\n  dataViewMode = localStorage.getItem(\"dataViewMode\") || DATA_VIEW_MODE.TABLE;\r\n  currentPage = 1;\r\n  //сортировка по имени\r\n  orderBy = {\r\n    order: \"\",\r\n    hideSortIcon: false,\r\n  };\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  getContacts = async () => {\r\n    try {\r\n      this.isLoading = true;\r\n      const response = await fetch(\"https://randomuser.me/api/?results=50\");\r\n      const { results, error } = await response.json();\r\n      if (error) {\r\n        throw new Error();\r\n      }\r\n      runInAction(() => {\r\n        this.users = results;\r\n        this.isError = false;\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => (this.isError = true));\r\n    } finally {\r\n      runInAction(() => (this.isLoading = false));\r\n    }\r\n  };\r\n\r\n  setCurrentPage(page) {\r\n    this.currentPage = page;\r\n  }\r\n  setSearchText(text) {\r\n    this.filter.searchText = text;\r\n  }\r\n  setOrderBy(order, hideSortIcon) {\r\n    this.orderBy.order = order;\r\n    this.orderBy.hideSortIcon = hideSortIcon;\r\n  }\r\n  setGender(gender) {\r\n    this.filter.gender = gender;\r\n  }\r\n  setNat(nat) {\r\n    this.filter.nationality = nat;\r\n  }\r\n  setViewMode(mode) {\r\n    this.dataViewMode = mode;\r\n  }\r\n}\r\nexport default new Store();\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport {TableSortLabel,\r\n  Table,\r\n  TableBody,\r\n  Button,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\nimport {\r\n  NATIONALITY_HUMAN_NAME,\r\n  NATIONALITY_HUMAN_COLOR,\r\n} from \"../../../constants\";\r\nimport store from \"../../../store\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {},\r\n  row: {\r\n    \"&>*:not(img)\": {\r\n      padding: theme.spacing(1 / 2),\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n   \r\n    borderRadius: \"50%\",\r\n  },\r\n  name: {\r\n    color: \"dodgerBlue\",\r\n  },\r\n  nat: {textTransform:'none',\r\n  fontSize:11 ,\r\n  minWidth:theme.spacing(10)\r\n  }\r\n}))\r\n\r\nexport const ContactsTable = ({ data ,orderHandler}) => {\r\n  const classes = useStyles();\r\n\r\n  \r\n  return (\r\n    <TableContainer component={Paper} data-testid=\"contacts-table-container\">\r\n      <Table className={classes.table} aria-label=\"contacts table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Avatar</TableCell>\r\n\t\t\t<TableCell\r\n\t\t\t\r\n\t\t\t > <TableSortLabel\r\n\t\t\t onClick={orderHandler}\r\n\t\t\r\n\t\t\t hideSortIcon={store.orderBy.hideSortIcon}\r\n\t\t\t direction={store.orderBy.order || \"asc\"}\r\n\t\t\t>Full name</TableSortLabel></TableCell>\r\n            <TableCell>Birthday</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Phone</TableCell>\r\n            <TableCell>Location</TableCell>\r\n            <TableCell>Nationality</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((item) => (\r\n            <TableRow hover={true} size=\"small\" key={item.login.uuid} className={classes.row}>\r\n              <TableCell>\r\n                <Avatar\r\n                  className={classes.small}\r\n                  alt=\"\"\r\n                  src={item.picture.thumbnail}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography className={classes.name}>\r\n                  {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>\r\n                  {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}{\" \"}\r\n                </Typography>\r\n                <Typography>{`${item.dob.age} years`}</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.email} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.phone} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext\r\n                  blackcolor={true}\r\n                  text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`}\r\n                />\r\n              </TableCell>\r\n              <TableCell  align=\"right\" >\r\n\t\t\t\t<Button \r\n\t\t\t\tvariant='outlined'\r\n\t\t\t\t\t style={{ borderColor:NATIONALITY_HUMAN_COLOR[item.nat], color: NATIONALITY_HUMAN_COLOR[item.nat] }}\r\n                  onClick={() =>\r\n                    (store.setNat(\r\n                      NATIONALITY_HUMAN_NAME[item.nat]))\r\n                  }\r\n                  className={classes.nat}\r\n                ><span  className={classes.nat}>\r\n                  {NATIONALITY_HUMAN_NAME[item.nat]}\r\n\t\t\t\t  </span>\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport {MenuItem,InputLabel,FormControl,Select,OutlinedInput,InputAdornment,Button,Grid,Paper} from \"@material-ui/core\"\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport store from \"../../../store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { GENDER } from \"../../../constants\";\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n\tsearchBlock: {\r\n\t\tmarginTop:theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  input_item: { maxHeight:theme.spacing(5) ,minWidth: theme.spacing(40), width: \"100%\" },\r\n  clear_btn: {\r\n    height: theme.spacing(5),\r\n  },\r\n  paper: {\r\n\twidth: \"100%\",\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n//body\r\nexport const SearchPanel = observer(() => {\r\n  const classes = useStyles();\r\n  const { filter } = store;\r\n  return (\r\n    <Grid container className={classes.searchBlock}>\r\n      <Paper variant='outlined' className={classes.paper}>\r\n        <Grid container spacing={3}>\r\n          {/* поиск по имени */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n\t\t\t  value={filter.searchText}\r\n              onChange={e => store.setSearchText(e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Search by name\"\r\n              endAdornment={<InputAdornment>\r\n                \t\t\t  <SearchIcon />\r\n                \t\t\t</InputAdornment>}/>\r\n          </Grid>\r\n          {/* выбор пола */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4} >\r\n            <FormControl variant=\"outlined\"className={classes.input_item} >\r\n              <InputLabel id=\"gender\">Gender</InputLabel>\r\n              <Select className={classes.input_item}\r\n                id=\"gender\"\r\n                label=\"gender\"\r\n\t\t\t\tvalue={filter.gender}\r\n                onChange={e => store.setGender(e.target.value)}\r\n              >\r\n                <MenuItem  value={GENDER.ALL}>All</MenuItem>\r\n                <MenuItem  value={GENDER.MALE}>Male</MenuItem>\r\n                <MenuItem  value={GENDER.FEMALE}>Female</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          {/* поиск по национальности*/}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n              value={filter.nationality}\r\n              onChange={e => store.setNat(e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Search by nationality\"\r\n            />\r\n          </Grid>\r\n          {/* кнопка очистки инпутов */}\r\n          <Button\r\n\t\t\tfullWidth\r\n            className={classes.clear_btn}\r\n\t\t\tonClick={() => {store.setSearchText(\"\");\r\n\t\t\t\t\t\t\tstore.setGender(GENDER.ALL);\r\n\t\t\t\t\t\t\tstore.setNat(\"\")}}>\r\n            Clear\r\n          </Button>\r\n          {/* закрывающие теги */}\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n});\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Card,\r\n  Avatar,\r\n  Typography,\r\n  CardContent,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\nimport {\r\n  NATIONALITY_HUMAN_COLOR,\r\n  NATIONALITY_HUMAN_NAME,\r\n} from \"../../../constants\";\r\nimport store from \"../../../store\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    whiteSpace: \"pre-line\",\r\n    minHeight: theme.spacing(20),\r\n    textAlign: \"center\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(15),\r\n    height: theme.spacing(15),\r\n    margin: \"0 auto\",\r\n  },\r\n  nat: { textTransform: \"none\", minWidth: theme.spacing(15) },\r\n}));\r\nexport const ContactsCards = ({ data }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container className={classes.card} data-testid=\"contacts-grid-container\">\r\n      {data.map((item) => (\r\n        <Grid item xs={12} lg={3} sm={6} key={item.login.uuid}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <Avatar\r\n                variant=\"rounded\"\r\n                src={item.picture.thumbnail}\r\n                className={classes.avatar}\r\n              ></Avatar>\r\n              <Typography>\r\n                {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n              </Typography>\r\n              <Button\r\n                className={classes.nat}\r\n                onClick={() =>\r\n                  (store.setNat(\r\n\t\t\t\t\tNATIONALITY_HUMAN_NAME[item.nat]))\r\n                }\r\n                style={{\r\n                  borderColor: NATIONALITY_HUMAN_COLOR[item.nat],\r\n                  color: NATIONALITY_HUMAN_COLOR[item.nat],\r\n                }}\r\n              >\r\n                {NATIONALITY_HUMAN_NAME[item.nat]}\r\n              </Button>\r\n              <Typography>\r\n                {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}\r\n              </Typography>\r\n              <Typography>{`${item.dob.age} years`}</Typography>\r\n              <Typography>\r\n                <CopyToClipboardtext text={item.email} />{\" \"}\r\n              </Typography>\r\n              <CopyToClipboardtext text={item.phone} />\r\n              <Typography>\r\n                <CopyToClipboardtext\r\n                  blackcolor={true}\r\n                  text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n","import ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport { DATA_VIEW_MODE } from \"../../../constants\";\r\nimport store from '../../../store'\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport const ToggleDataViewMode = observer( () => {\r\n\t\r\n  //body\r\n\r\n\r\n  return (\r\n    <ToggleButtonGroup size='small'\r\n      orientation=\"horizontal\"\r\n\t  value={store.dataViewMode}\r\n\t  exclusive\r\n      onChange={  (_, nextView) => {if (nextView) {store.setViewMode(nextView)}}} >\r\n\t\t\t  <ToggleButton\r\n        value={DATA_VIEW_MODE.TABLE}\r\n\t\taria-label={DATA_VIEW_MODE.TABLE}\r\n\t\tdata-testid={\"toggle-data-view-mode-table\"}\r\n      >\r\n        <ViewListIcon />\r\n      </ToggleButton>\r\n      <ToggleButton\r\n\t\tvalue={DATA_VIEW_MODE.GRID}\r\n\t\taria-label={DATA_VIEW_MODE.GRID}\r\n\t\tdata-testid={\"toggle-data-view-mode-grid\"}\r\n      >\r\n        <ViewModuleIcon />\r\n      </ToggleButton>\r\n\r\n    </ToggleButtonGroup>\r\n  );\r\n}\r\n)\r\n","import RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport store from \"../../../store\";\r\nimport { ToggleDataViewMode } from \"../ToggleDataViewMode\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    headContainer: {\r\n      marginTop: theme.spacing(2),\r\n\t},\r\n\trefresh_button: {\r\n\t\tmarginRight: theme.spacing(1),\r\n\t  },\r\n  })\r\n);\r\nexport const Header = () => {\r\n\tconst classes = useStyles();\r\n  const { getContacts } = store;\r\n  return (\r\n    <Grid item xs={12}\r\n      className={classes.headContainer} >\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          Contacts\r\n        </Typography>\r\n        <Box display=\"flex\">\r\n          <IconButton\r\n            className={classes.refresh_button}\r\n            aria-label=\"refresh\"\r\n            onClick={() => getContacts()}\r\n          >\r\n            <RefreshIcon />\r\n          </IconButton>\r\n          <ToggleDataViewMode />\r\n        </Box>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n};\r\n","import {useState,useEffect} from 'react'\r\n\r\nexport const useDebounce = (value, delay)  => { \r\n\t// State and setters for debounced value\r\n\tconst [debouncedValue, setDebouncedValue] = useState(value);\r\n\tuseEffect(\r\n\t  () => {\r\n\t\tconst handler = setTimeout(() => {\r\n\t\t  setDebouncedValue(value);\r\n\t\t}, delay);\r\n\t\treturn () => {\r\n\t\t  clearTimeout(handler);\r\n\t\t};\r\n\t  },\r\n\t  [value, delay] \r\n\t)\r\n\treturn debouncedValue.toLowerCase();}","import { useStatistic } from \"../useStatictic\";\r\nimport {Paper,Grid,TableHead,Typography,TableRow,TableCell,TableBody,Table} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n\tpadding: theme.spacing(3),\r\n  },\r\n  predominate: {\r\n    fontWeight: 500,\r\n    backgroundColor: \"yellow\",\r\n    marginLeft: theme.spacing(19),\r\n  },\r\n  grey:{\"&>*\": {color: \"grey\" ,borderBottom:'none',  }},\r\n  natCollection:{\r\n\tjustifyContent:'center',\r\n\t\"& >*\": {whiteSpace: \"pre\" , \"&>*\":{justifyContent:'center'} }\r\n  }\r\n}));\r\nexport const Statistic = () => {\r\n  const [\r\n    { males, females, collectionSize, indeterminate, natCollection },\r\n  ] = useStatistic();\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" data-testid='statictic-container' className={classes.paper}>\r\n      <Typography variant=\"h6\">Statistic</Typography>\r\n      <Grid container>\r\n        <Grid item xs={5}>\r\n          <Table >\r\n            <TableHead >\r\n              <TableRow className={classes.grey}>\r\n                <TableCell > Collection Size</TableCell>\r\n                <TableCell> Male</TableCell>\r\n                <TableCell> Females</TableCell>\r\n                <TableCell> Indeterminate</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell> {collectionSize}</TableCell>\r\n                <TableCell> {males}</TableCell>\r\n                <TableCell> {females}</TableCell>\r\n                <TableCell> {indeterminate}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n          <Typography noWrap display=\"inline\" className={classes.predominate}>\r\n            {males === females\r\n              ? null\r\n              : males > females\r\n              ? \"Men predominate\"\r\n              : \"Women predominate\"}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container className={classes.natCollection}>\r\n          <Grid>\r\n            <Typography  style={{color : 'grey'}} >Nationalities</Typography>\r\n          </Grid>\r\n          <Grid container>\r\n            {Object.keys(natCollection).sort().map((i) => (\r\n              <Grid  key={i} item xs={12} sm={6} md={4} lg={3}>\r\n                <span style={{\tfontWeight:800}}>{i}</span>\r\n                <span>\r\n\t\t\t\t\t{natCollection[i] === 1 ?\r\n\t\t\t\t\t  `  ${natCollection[i]} contact` \r\n\t\t\t\t\t :\r\n\t\t\t\t\t  `  ${natCollection[i]} contacts` }\t\r\n\t\t\t\t\t</span>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n","import store from '../../store'\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../constants\"\r\nexport const useStatistic = () => {\r\n \r\n// получение числа людей в коллекции, разбивка по полу и нации\r\nconst getStatictic = store.users.reduce(\r\n    (acc, value) => {\r\n      acc.collectionSize += 1;\r\n      if (value.gender === \"male\") {\r\n        acc.males += 1;\r\n      } else if (value.gender === \"female\") {\r\n        acc.females += 1;\r\n      } else {\r\n        acc.indeterminate += 1;\r\n      }\r\n      const fullNational = NATIONALITY_HUMAN_NAME[value.nat] || value.nat;\r\n      if (!acc.natCollection[fullNational]) {\r\n        acc.natCollection[fullNational] = 1;\r\n      } else {\r\n        acc.natCollection[fullNational] += 1;\r\n      }\r\n      return acc;\r\n    },\r\n    {\r\n      collectionSize: 0,\r\n      males: 0,\r\n      females: 0,\r\n      indeterminate: 0,\r\n      natCollection: [],\r\n    },\r\n  )\r\n\r\nreturn [getStatictic]\r\n}","import { Grid, Container, LinearProgress } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport { ContactsTable } from \"./ContactsTable\";\r\nimport { DATA_VIEW_MODE } from \"../../constants\";\r\nimport { SearchPanel } from \"./SearchPanel\";\r\nimport store from \"../../store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ContactsCards } from \"./ContactsCards\";\r\nimport { Header } from \"./Header\";\r\nimport { useFilter } from \"./useFilter\";\r\nimport { Statistic } from \"./../Contacts/Statistic\";\r\n// styles\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: { \"&>*\": { justifyContent: \"center\" } },\r\n    headContainer: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    content: {\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n  })\r\n);\r\n//body\r\nexport const Contacts = observer(() => {\r\n  const classes = useStyles();\r\n  const { isLoading, isError, dataViewMode, currentPage } = store;\r\n  const [currentUsers, pagesCount, handleChange ,orderHandler] = useFilter();\r\n\r\n  //render\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Grid container>\r\n        <Header />\r\n        <Grid item xs={12}>\r\n          <SearchPanel />\r\n        </Grid>\r\n        <Pagination\r\n          page={currentPage}\r\n          onChange={handleChange}\r\n          count={pagesCount}\r\n        />\r\n        <Grid item xs={12} className={classes.content}>\r\n          {isLoading ? (\r\n            <LinearProgress data-testid=\"contacts-loader\" />\r\n          ) : isError ? (\r\n            <div data-testid=\"contacts-error\"> Fetch Error </div>\r\n          ) : dataViewMode === DATA_VIEW_MODE.TABLE ? (\r\n            <ContactsTable orderHandler={orderHandler} data={currentUsers} />\r\n          ) : (\r\n            <ContactsCards data={currentUsers} />\r\n          )}\r\n        </Grid>\r\n        {isLoading === false ? <Statistic /> : null}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n});\r\n","import { NATIONALITY_HUMAN_NAME } from \"../../constants\";\r\nimport store from \"../../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"./useDebounce\";\r\n\r\nexport const useFilter = () => {\r\n  const { users, filter, currentPage, orderBy, } = store;\r\n  // debounce\r\n  const debouncedText = useDebounce(filter.searchText, 500);\r\n  const debouncedNationality = useDebounce(filter.nationality, 500);\r\n  //отфильтрованный результат\r\n  const [result, setResult] = useState([]);\r\n\r\n  // функция фильтра\r\n  useEffect(() => {\r\n    setResult(\r\n      users\r\n        .filter(\r\n          (user) => filter.gender === \"all\" || user.gender === filter.gender\r\n        )\r\n        .filter((user) => {\r\n          if (\r\n            (user.name.first + \" \" + user.name.last)\r\n              .toLowerCase()\r\n              .includes(debouncedText)\r\n          )\r\n            return true;\r\n          return false;\r\n        })\r\n        .filter((user) => {\r\n          if (\r\n            NATIONALITY_HUMAN_NAME[user.nat]\r\n              .toLowerCase()\r\n              .includes(debouncedNationality)\r\n          )\r\n            return true;\r\n          return false;\r\n        })\r\n    );\r\n  }, [debouncedText, debouncedNationality, filter.gender , users]);\r\n  //\r\n  useEffect(() => {\r\n    setResult(users);\r\n  }, [users]);\r\n\r\n\r\n  const sortFunc = () => {\r\n    switch (orderBy.order) {\r\n      case \"asc\":\r\n        return [...result].sort((a, b) =>\r\n          a.name.first.localeCompare(b.name.first)\r\n        );\r\n      case \"desc\":\r\n        return [...result].sort((a, b) =>\r\n          b.name.first.localeCompare(a.name.first)\r\n        );\r\n      default:\r\n        return result;\r\n    }\r\n  };\r\n  const orderHandler = () => {\r\n\t  orderBy.order===\"\" ? store.setOrderBy(\"asc\" , false):\r\n\t  orderBy.order===\"asc\" ? store.setOrderBy('desc' , false): store.setOrderBy('' , true)\r\n\t\t\r\n\t  }\r\n\r\n  const sortedUsers = sortFunc();\r\n\r\n  // фильтр по страницам\r\n  const pageSize = 8;\r\n  const pagesCount = Math.ceil(sortedUsers.length / pageSize);\r\n  const indexOfLastPage = currentPage * pageSize;\r\n  const indexOfFistPage = indexOfLastPage - pageSize;\r\n  const currentUsers = sortedUsers.slice(indexOfFistPage, indexOfLastPage);\r\n  //сброс на первую страницу,если изменился фильтр\r\n  useEffect(() => {\r\n    store.setCurrentPage(1);\r\n  }, [result]);\r\n  // фетч при первом рендере\r\n  useEffect(() => {\r\n    store.getContacts();\r\n  }, []);\r\n  // сетить в локал сторадж\r\n  useEffect(() => {\r\n    localStorage.setItem(\"dataViewMode\", store.dataViewMode);\r\n  });\r\n  // хендлер изменения номера страницы\r\n  const handleChange = (_, value) => {\r\n    store.setCurrentPage(value);\r\n  };\r\n\r\n  return [currentUsers, pagesCount, handleChange, orderHandler];\r\n};\r\n","import {Contacts} from \"./pages/Contacts\";\r\n\r\nexport function App() {\r\n  return (\r\n    <div>\r\n\t\r\n      <Contacts/>\r\n\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\nreportWebVitals();\r\n"],"sourceRoot":""}