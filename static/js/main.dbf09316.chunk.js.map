{"version":3,"sources":["components/CopyToClipboardText/index.js","constants/nationality.js","constants/gender.js","store/searchPanelStore.js","pages/Contacts/ContactsTable/index.js","constants/constants.js","pages/Contacts/ToggleDataViewMode/index.js","pages/Contacts/useDataViewMode.js","pages/Contacts/SearchPanel/index.js","store/contactsStore.js","pages/Contacts/ContactsCards/index.js","pages/Contacts/index.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","textTransform","color","whiteSpace","textAlign","icon","marginRight","spacing","black","STATUS_COPY","TITLE_BY_STATUS","CopyToClipboardtext","blackcolor","text","useCopyToClipboard","copyToClipboard","classes","useState","statusCopy","setStatusCopy","onClickCopy","useCallback","onClickAway","ClickAwayListener","Tooltip","title","arrow","placement","Button","className","onClick","NATIONALITY","NATIONALITY_HUMAN_NAME","NATIONALITY_HUMAN_COLOR","GENDER","filter","searchText","gender","nationality","makeAutoObservable","this","table","row","padding","small","width","height","borderRadius","name","nat","ContactsTable","data","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","item","alt","src","picture","thumbnail","Typography","first","last","format","parseISO","dob","date","age","email","phone","location","country","street","number","align","searchPanelStore","style","backgroundColor","login","uuid","DATA_VIEW_MODE","TABLE","GRID","ToggleDataViewMode","dataViewMode","setdataViewMode","handleChangeViewMode","_","nextView","ToggleButtonGroup","size","orientation","value","exclusive","onChange","ToggleButton","getInitialDataViewMode","localStorage","getItem","paddingBottom","input_item","minWidth","clear_btn","paper","SearchPanel","observer","SearchPanelStore","Grid","container","xs","sm","md","xl","OutlinedInput","e","target","placeholder","endAdornment","InputAdornment","FormControl","variant","InputLabel","id","Select","label","MenuItem","users","isLoading","isError","getContacts","a","fetch","response","json","results","error","Error","console","log","card","minHeight","margin","large","alignItems","ContactsCards","lg","Card","CardContent","headContainer","marginTop","refresh_button","Contacts","ContactsStore","useEffect","setItem","useDataViewMode","filteredUsers","user","toLowerCase","includes","currentPage","setcurrentPage","pagesCount","Math","ceil","length","indexOfLastPage","indexOfFistPage","currentUsers","slice","Container","Box","display","justifyContent","IconButton","Pagination","event","count","LinearProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbf09316.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport propsTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { useCopyToClipboard } from \"react-use\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport { useCallback, useState } from \"react\";\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n\t  cursor: \"pointer\",\r\n\t  textTransform: \"none\",\r\n\t  color : 'dodgerBlue',\r\n\t  whiteSpace: \"pre-line\",\r\n\t  textAlign:'left'\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(1),\r\n\t},\r\n\tblack:{\r\n\tcolor:'black'}\r\n  })\r\n);\r\nconst STATUS_COPY = {\r\n  COPY: \"copy\",\r\n  COPIED: \"copied\",\r\n};\r\nconst TITLE_BY_STATUS = {\r\n\t[STATUS_COPY.COPY] : 'Copy',\r\n\t[STATUS_COPY.COPIED]: 'Copied'\r\n}\r\n\r\nexport const CopyToClipboardtext = ({blackcolor, text }) => {\r\n  const [, copyToClipboard] = useCopyToClipboard();\r\n  const classes = useStyles();\r\n  const [statusCopy, setStatusCopy] = useState(STATUS_COPY.COPY);\r\n\r\n  const onClickCopy = useCallback(() => {\r\n    copyToClipboard(text);\r\n    setStatusCopy(STATUS_COPY.COPIED);\r\n  }, [copyToClipboard ,text]);\r\n\r\n  const onClickAway = useCallback(() => {\r\n    setStatusCopy(STATUS_COPY.COPY);\r\n  }, [setStatusCopy]);\r\n  return (\r\n    <ClickAwayListener onClickAway={onClickAway}>\r\n      <Tooltip title={TITLE_BY_STATUS[statusCopy]} arrow placement=\"top\">\r\n        <Button  className={classes.root} onClick={onClickCopy}>\r\n          <FileCopyOutlinedIcon  className={classes.icon} />\r\n\t\t  <div className={blackcolor ? `${classes.black}` : null}>\r\n          {text}\r\n\t\t  </div>\r\n        </Button>\r\n      </Tooltip>\r\n    </ClickAwayListener>\r\n  );\r\n};\r\n\r\nCopyToClipboardtext.propTypes = {\r\n  text: propsTypes.string.isRequired,\r\n};\r\n","export const NATIONALITY = {\r\n  AU: \"AU\",\r\n  BR: \"BR\",\r\n  CA: \"CA\",\r\n  CH: \"CH\",\r\n  DE: \"DE\",\r\n  DK: \"DK\",\r\n  ES: \"ES\",\r\n  FI: \"FI\",\r\n  FR: \"FR\",\r\n  GB: \"GB\",\r\n  IE: \"IE\",\r\n  IR: \"IR\",\r\n  NO: \"NO\",\r\n  NL: \"NL\",\r\n  NZ: \"NZ\",\r\n  TR: \"TR\",\r\n  US: \"US\"\r\n};\r\n\r\nexport const NATIONALITY_HUMAN_NAME = {\r\n\t[NATIONALITY.AU]: \"Australian\",\r\n\t[NATIONALITY.BR]: \"Brazilian\",\r\n\t[NATIONALITY.CA]: \"Canadian\",\r\n\t[NATIONALITY.CH]: \"Chinese\",\r\n\t[NATIONALITY.DE]: \"German\",\r\n\t[NATIONALITY.DK]: \"Danish\",\r\n\t[NATIONALITY.ES]: \"Spanish\",\r\n\t[NATIONALITY.FI]: \"Finn\",\r\n\t[NATIONALITY.FR]: \"French\",\r\n\t[NATIONALITY.GB]: \"British\",\r\n\t[NATIONALITY.IE]: \"Irish \",\r\n\t[NATIONALITY.IR]: \"Iranian\",\r\n\t[NATIONALITY.NO]: \"Norwegian\",\r\n\t[NATIONALITY.NL]: \"Netherlander\",\r\n\t[NATIONALITY.NZ]: \"New Zealander\",\r\n\t[NATIONALITY.TR]: \"Turkish\",\r\n\t[NATIONALITY.US]: \"American\"\r\n\r\n}\r\nexport const NATIONALITY_HUMAN_COLOR = {\r\n\t[NATIONALITY.AU]: \"red\",\r\n\t[NATIONALITY.BR]: \"pink\",\r\n\t[NATIONALITY.CA]: \"mediumpurple\",\r\n\t[NATIONALITY.CH]: \"cyan\",\r\n\t[NATIONALITY.DE]: \"yellow\",\r\n\t[NATIONALITY.DK]: \"mistyrose\",\r\n\t[NATIONALITY.ES]: \"magenta\",\r\n\t[NATIONALITY.FI]: \"orange\",\r\n\t[NATIONALITY.FR]: \"olive\",\r\n\t[NATIONALITY.GB]: \"teal\",\r\n\t[NATIONALITY.IE]: \"violet\",\r\n\t[NATIONALITY.IR]: \"plum\",\r\n\t[NATIONALITY.NO]: \"peru\",\r\n\t[NATIONALITY.NL]: \"cadetblue\",\r\n\t[NATIONALITY.NZ]: \"brown\",\r\n\t[NATIONALITY.TR]: \"silver\",\r\n\t[NATIONALITY.US]: \"goldenrod\"\r\n\r\n}","export const GENDER = {\r\n\tALL: \"all\",\r\n\tMALE: \"male\",\r\n\tFEMALE:\"female\"\r\n  };","import { makeAutoObservable } from \"mobx\";\r\nimport {GENDER} from \"../constants/gender\"\r\n\r\nclass SearchPanelStore {\r\n  filter = {\r\n  searchText : \"\",\r\n  gender : GENDER.ALL ,\r\n  nationality : \"\"}\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n}\r\n\r\n\r\nexport default new SearchPanelStore();\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../../constants/nationality\";\r\nimport { NATIONALITY_HUMAN_COLOR } from \"../../../constants/nationality\";\r\nimport searchPanelStore from '../../../store/searchPanelStore'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {},\r\n  row: { \"& *:not(img)\" : {padding: \"2px\"  } },\r\n  small: {\r\n    width: theme.spacing(5),\r\n\theight: theme.spacing(5),\r\n\tborderRadius:\"50%\"\r\n  },\r\n  name : {\r\n\tcolor: 'dodgerBlue'\r\n  },\r\n  nat: {\r\n\t  cursor:'pointer'\r\n  }\r\n}))\r\n\r\nexport const ContactsTable = ({ data }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"contacts table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Avatar</TableCell>\r\n            <TableCell>Full name</TableCell>\r\n            <TableCell>Birthday</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Phone</TableCell>\r\n            <TableCell>Location</TableCell>\r\n            <TableCell>Nationality</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((item) => (\r\n            <TableRow key={item.login.uuid} className={classes.row}>\r\n              <TableCell>\r\n                <img className={classes.small} alt=\"\" src={item.picture.thumbnail} />\r\n              </TableCell>\r\n              <TableCell>\r\n\t\t\t  <Typography className={classes.name}>\r\n                {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n\t\t\t\t</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>\r\n                  {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}{\" \"}\r\n                </Typography>\r\n                <Typography\r\n\t\t\t\t>{`${item.dob.age} years`}\r\n\t\t\t\t </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.email} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.phone} />\r\n              </TableCell>\r\n              <TableCell>\r\n\t\t\t  <CopyToClipboardtext blackcolor={true} text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`} />\r\n              </TableCell>\r\n              <TableCell align=\"right\" className={classes.nat}>\r\n\t\t\t  <Button  onClick={() => searchPanelStore.filter.nationality = NATIONALITY_HUMAN_NAME[item.nat]} style={{backgroundColor:NATIONALITY_HUMAN_COLOR[item.nat]}}>\r\n                {NATIONALITY_HUMAN_NAME[item.nat]}</Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n}\r\n","export const DATA_VIEW_MODE = {\r\n\tTABLE: \"table\",\r\n\tGRID: \"grid\",\r\n  };","import ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport { DATA_VIEW_MODE } from \"../../../constants/constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useCallback } from \"react\";\r\n\r\nexport const ToggleDataViewMode = ({ dataViewMode, setdataViewMode }) => {\r\n  //body\r\n  const handleChangeViewMode = useCallback(\r\n    (_, nextView) => {\r\n      setdataViewMode(nextView);\r\n    },\r\n    [setdataViewMode]\r\n  );\r\n  //return\r\n  return (\r\n    <ToggleButtonGroup size='small'\r\n      orientation=\"horizontal\"\r\n      value={dataViewMode}\r\n      exclusive\r\n      onChange={handleChangeViewMode}\r\n    >\r\n\r\n      <ToggleButton\r\n        value={DATA_VIEW_MODE.TABLE}\r\n        aria-label={DATA_VIEW_MODE.TABLE}\r\n      >\r\n        <ViewModuleIcon />\r\n      </ToggleButton>\r\n\t  <ToggleButton\r\n        value={DATA_VIEW_MODE.GRID}\r\n        aria-label={DATA_VIEW_MODE.GRID}\r\n      >\r\n        <ViewListIcon />\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n};\r\n//proptypes\r\nToggleDataViewMode.propTypes = {\r\n  dataViewMode: PropTypes.oneOf([DATA_VIEW_MODE.TABLE, DATA_VIEW_MODE.GRID]),\r\n  setdataViewMode: PropTypes.func.isRequired,\r\n};\r\n","//кастом хук , который устанавливает стейт в компонент Contacts\r\n//1. проверяет локал сторадж ,если ничего нет , то устанавливает табличный вид\r\n//2. при изменении вида ,срабатывает useEffect и меняет значение в объекте\r\n\r\n//! баг при повторном нажатии \r\nimport {DATA_VIEW_MODE} from '../../constants/constants'\r\nimport { useState ,useEffect } from \"react\";\r\n\r\nconst getInitialDataViewMode = () => {\r\n\treturn localStorage.getItem('dataViewMode') || DATA_VIEW_MODE.TABLE\r\n}\r\nexport const useDataViewMode = () => { \r\n\tconst [dataViewMode, setdataViewMode] = useState(getInitialDataViewMode);\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem('dataViewMode',dataViewMode)\r\n\t}, [dataViewMode, setdataViewMode]);\r\n\treturn [dataViewMode, setdataViewMode]\r\n}","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport SearchPanelStore from \"../../../store/searchPanelStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { GENDER } from \"../../../constants/gender\";\r\nimport { TextField } from \"@material-ui/core\";\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  input_item: { minWidth: theme.spacing(47), width: \"100%\" },\r\n  clear_btn: {\r\n    width: \"100%\",\r\n    height: theme.spacing(5),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n//body\r\nexport const SearchPanel = observer(() => {\r\n  const classes = useStyles();\r\n  const { filter } = SearchPanelStore;\r\n  return (\r\n    <Grid container className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container spacing={3}>\r\n          {/* поиск по имени */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n              size=\"small\"\r\n              value={filter.searchText}\r\n              onChange={(e) => (filter.searchText = e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Search by full name\"\r\n              endAdornment={\r\n                <InputAdornment>\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              }\r\n            />\r\n          </Grid>\r\n          {/* выбор пола */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <FormControl variant=\"outlined\" className={classes.input_item}>\r\n              <InputLabel id=\"gender\">Gender</InputLabel>\r\n              <Select\r\n                id=\"gender\"\r\n                label=\"gender\"\r\n                value={filter.gender}\r\n                onChange={(e) => (filter.gender = e.target.value)}\r\n              >\r\n                <MenuItem value={GENDER.ALL}>All</MenuItem>\r\n                <MenuItem value={GENDER.MALE}>Male</MenuItem>\r\n                <MenuItem value={GENDER.FEMALE}>Female</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          {/* поиск по национальности*/}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n              value={filter.nationality}\r\n              onChange={(e) => (filter.nationality = e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Nationality\"\r\n            />\r\n          </Grid>\r\n          {/* кнопка очистки инпутов */}\r\n          <Button\r\n            size=\"small\"\r\n            className={classes.clear_btn}\r\n            onClick={() => (\r\n              (filter.searchText = \"\"),\r\n              (filter.gender = GENDER.ALL),\r\n              (filter.nationality = \"\")\r\n            )}\r\n          >\r\n            Clear\r\n          </Button>\r\n          {/* закрывающие теги */}\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n});\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass ContactsStore {\r\n  users = [];\r\n  isLoading = true;\r\n  isError = false;\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  getContacts = async () => {\r\n    try {\r\n      this.isLoading = true;\r\n      const response = await fetch(\"https://randomuser.me/api/?results=400\");\r\n      const { results, error } = await response.json();\r\n      if (error) {\r\n        throw new Error();\r\n      }\r\n      this.users = results;\r\n      this.isError = false;\r\n    } catch (e) {\r\n      this.isError = true;\r\n    } finally {\r\n\t  this.isLoading = false;\r\n\t  \r\n\t}\r\n\tconsole.log(this.users)\r\n  };\r\n}\r\n\r\nexport default new ContactsStore();\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../../constants/nationality\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { NATIONALITY_HUMAN_COLOR } from \"../../../constants/nationality\";\r\nimport searchPanelStore from \"../../../store/searchPanelStore\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    whiteSpace: \"pre-line\",\r\n\tminHeight: theme.spacing(20),\r\n\ttextAlign: \"center\",\r\n\tmargin:'0 auto'\r\n  },\r\n  large: {\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n    alignItems: \"center\",\r\n    borderRadius: \"50%\",\r\n  },\r\n}));\r\n\r\nexport const ContactsCards = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container className={classes.card}> \r\n      {data.map((item) => (\r\n        <Grid item xs={12} lg={3} sm={6} key={item.login.uuid}>\r\n          <Card variant=\"outlined\" >\r\n            <CardContent  >\r\n              <img\r\n                alt=\"\"\r\n                src={item.picture.thumbnail}\r\n                className={classes.large}\r\n              />\r\n              <Typography >\r\n                {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n              </Typography>\r\n\t\t\t  <Button className={classes.nat}\r\n                onClick={() =>\r\n                  (searchPanelStore.filter.nationality =\r\n                    NATIONALITY_HUMAN_NAME[item.nat])\r\n                }\r\n                style={{ backgroundColor: NATIONALITY_HUMAN_COLOR[item.nat] }}\r\n              >\r\n                {NATIONALITY_HUMAN_NAME[item.nat]}\r\n              </Button>\r\n              <Typography>\r\n                {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}\r\n              </Typography>\r\n              <Typography>{`${item.dob.age} years`} </Typography>\r\n\t\t\t\t\r\n              <Typography>\r\n                <CopyToClipboardtext text={item.email} />\r\n              </Typography>\r\n              <CopyToClipboardtext text={item.phone} />\r\n              <Typography>\r\n                <CopyToClipboardtext\r\n                  blackcolor={true}\r\n                  text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { ContactsTable } from \"./ContactsTable\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { ToggleDataViewMode } from \"./ToggleDataViewMode\";\r\nimport { DATA_VIEW_MODE } from \"../../constants/constants\";\r\nimport { useDataViewMode } from \"./useDataViewMode\";\r\nimport { SearchPanel } from \"./SearchPanel\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport { useEffect } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../constants/nationality\";\r\nimport ContactsStore from \"../../store/contactsStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport SearchPanelStore from \"../../store/searchPanelStore\";\r\nimport { ContactsCards } from \"./ContactsCards\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport {useState} from 'react'\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {},\r\n    headContainer: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    refresh_button: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n  })\r\n);\r\n//body\r\nexport const Contacts = observer(() => {\r\n  const classes = useStyles();\r\n  const { getContacts, users, isLoading, isError } = ContactsStore;\r\n  const [dataViewMode, setdataViewMode] = useDataViewMode();\r\n  const { filter } = SearchPanelStore;\r\n\r\n  const filteredUsers = users\r\n    .filter((user) => filter.gender === \"all\" || user.gender === filter.gender)\r\n    .filter((user) => {\r\n      if (\r\n        (user.name.first + \" \" + user.name.last)\r\n          .toLowerCase()\r\n          .includes(filter.searchText.toLowerCase())\r\n      )\r\n        return true;\r\n      return false;\r\n    })\r\n    .filter((user) => {\r\n      if (\r\n        NATIONALITY_HUMAN_NAME[user.nat]\r\n          .toLowerCase()\r\n          .includes(filter.nationality.toLowerCase())\r\n      ) \r\n        return true;\r\n      return false;\r\n    });\r\n\r\n  useEffect(() => {\r\n    getContacts();\r\n  }, [getContacts]);\r\n\r\n\r\n\r\n\r\nconst [currentPage, setcurrentPage] = useState (1);\r\n  const pageSize = 8;\r\n  const pagesCount = Math.ceil(filteredUsers.length/pageSize)\r\n  const indexOfLastPage = currentPage * pageSize\r\n  const indexOfFistPage = indexOfLastPage - pageSize\r\n  const currentUsers = filteredUsers.slice(indexOfFistPage,indexOfLastPage)\r\n  const handleChange = (event, value) => {\r\n    setcurrentPage(value);\r\n  };\r\n\r\n  useEffect(()=> {\r\n\tsetcurrentPage(1)\r\n},[filter.searchText,filter.gender,filter.nationality])\r\nconsole.log(currentPage)\r\n\r\n\r\n  //return\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Grid container>\r\n        <Grid item xs={12} className={classes.headContainer}>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <Typography variant=\"h5\" component=\"h1\">\r\n              Contacts\r\n            </Typography>\r\n            <Box display=\"flex\">\r\n              <IconButton\r\n                className={classes.refresh_button}\r\n                aria-label=\"refresh\"\r\n                onClick={() => getContacts()}\r\n              >\r\n                <RefreshIcon />\r\n              </IconButton>\r\n              <ToggleDataViewMode\r\n                dataViewMode={dataViewMode}\r\n                setdataViewMode={setdataViewMode}\r\n                DATA_VIEW_MODE={DATA_VIEW_MODE}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <SearchPanel />\r\n          </Box>\r\n        </Grid>\r\n\t\t<Pagination onChange={handleChange} count={pagesCount} />\r\n        <Grid item xs={12}>\r\n          {(() => {\r\n            if (isLoading) {\r\n              return <LinearProgress />;\r\n            }\r\n            if (isError) {\r\n              return <div>Error</div>;\r\n            }\r\n            if (dataViewMode === DATA_VIEW_MODE.TABLE) {\r\n              return <ContactsTable data={currentUsers} />;\r\n            }\r\n            if (dataViewMode === DATA_VIEW_MODE.GRID) {\r\n              return <ContactsCards data={currentUsers} />;\r\n            }\r\n            return \"error\";\r\n          })()}\r\n        </Grid>\r\n\t\r\n      </Grid>\r\n    </Container>\r\n  );\r\n});\r\n","import {Contacts} from \"./pages/Contacts\";\r\n\r\nexport function App() {\r\n  return (\r\n    <div>\r\n      <Contacts/>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\nreportWebVitals();\r\n"],"sourceRoot":""}