{"version":3,"sources":["components/CopyToClipboardText/index.js","constants/index.js","store/index.js","pages/Contacts/ContactsTable/index.js","pages/Contacts/SearchPanel/index.js","pages/Contacts/ContactsCards/index.js","pages/Contacts/ToggleDataViewMode/index.js","pages/Contacts/Header/index.js","pages/Contacts/index.js","pages/Contacts/useContacts.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","textTransform","color","whiteSpace","textAlign","icon","marginRight","spacing","black","STATUS_COPY","TITLE_BY_STATUS","CopyToClipboardtext","blackcolor","text","useCopyToClipboard","copyToClipboard","classes","useState","statusCopy","setStatusCopy","onClickCopy","useCallback","onClickAway","ClickAwayListener","Tooltip","title","arrow","placement","Button","className","onClick","DATA_VIEW_MODE","GENDER","NATIONALITY","NATIONALITY_HUMAN_NAME","NATIONALITY_HUMAN_COLOR","users","isLoading","isError","filter","searchText","gender","nationality","dataViewMode","localStorage","getItem","currentPage","getContacts","a","fetch","response","json","results","error","console","log","Error","runInAction","makeAutoObservable","this","page","nat","table","row","padding","marginLeft","small","width","height","borderRadius","name","ContactsTable","data","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","item","alt","src","picture","thumbnail","Typography","first","last","format","parseISO","dob","date","age","email","phone","location","country","street","number","align","store","style","backgroundColor","login","uuid","paddingBottom","input_item","maxHeight","minWidth","clear_btn","paper","SearchPanel","observer","Grid","container","xs","sm","md","xl","OutlinedInput","size","value","onChange","e","setSearchText","target","placeholder","endAdornment","InputAdornment","FormControl","variant","InputLabel","id","Select","label","setGender","MenuItem","setNat","card","minHeight","marginTop","large","alignItems","ContactsCards","lg","Card","CardContent","ToggleDataViewMode","useEffect","setItem","ToggleButtonGroup","orientation","exclusive","_","nextView","ToggleButton","headContainer","refresh_button","Header","Box","display","justifyContent","IconButton","Contacts","filteredUsers","user","toLowerCase","includes","pagesCount","Math","ceil","length","indexOfLastPage","indexOfFistPage","currentUsers","slice","setCurrentPage","useFilter","handleChange","Container","Pagination","count","LinearProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1af5b556.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport propsTypes from \"prop-types\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { useCopyToClipboard } from \"react-use\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n\t  cursor: \"pointer\",\r\n\t  textTransform: \"none\",\r\n\t  color : 'dodgerBlue',\r\n\t  whiteSpace: \"pre-line\",\r\n\t  textAlign:'left'\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(1),\r\n\t},\r\n\tblack:{\r\n\tcolor:'black'}\r\n  })\r\n);\r\nconst STATUS_COPY = {\r\n  COPY: \"copy\",\r\n  COPIED: \"copied\",\r\n};\r\nconst TITLE_BY_STATUS = {\r\n\t[STATUS_COPY.COPY] : 'Copy',\r\n\t[STATUS_COPY.COPIED]: 'Copied'\r\n}\r\n\r\nexport const CopyToClipboardtext = ({blackcolor, text }) => {\r\n  const [, copyToClipboard] = useCopyToClipboard();\r\n  const classes = useStyles();\r\n  const [statusCopy, setStatusCopy] = useState(STATUS_COPY.COPY);\r\n\r\n  const onClickCopy = useCallback(() => {\r\n    copyToClipboard(text);\r\n    setStatusCopy(STATUS_COPY.COPIED);\r\n  }, [copyToClipboard ,text]);\r\n\r\n  const onClickAway = useCallback(() => {\r\n    setStatusCopy(STATUS_COPY.COPY);\r\n  }, [setStatusCopy]);\r\n  return (\r\n    <ClickAwayListener onClickAway={onClickAway}>\r\n      <Tooltip title={TITLE_BY_STATUS[statusCopy]} arrow placement=\"top\">\r\n        <Button  className={classes.root} onClick={onClickCopy}>\r\n          <FileCopyOutlinedIcon  className={classes.icon} />\r\n\t\t  <div className={blackcolor ? `${classes.black}` : null}>\r\n          {text}\r\n\t\t  </div>\r\n        </Button>\r\n      </Tooltip>\r\n    </ClickAwayListener>\r\n  );\r\n};\r\n\r\nCopyToClipboardtext.propTypes = {\r\n  text: propsTypes.string.isRequired,\r\n};\r\n","export const DATA_VIEW_MODE = {\r\n\tTABLE: \"table\",\r\n\tGRID: \"grid\",\r\n  };\r\n  export const GENDER = {\r\n\tALL: \"all\",\r\n\tMALE: \"male\",\r\n\tFEMALE:\"female\"\r\n  };\r\n  export const NATIONALITY = {\r\n\tAU: \"AU\",\r\n\tBR: \"BR\",\r\n\tCA: \"CA\",\r\n\tCH: \"CH\",\r\n\tDE: \"DE\",\r\n\tDK: \"DK\",\r\n\tES: \"ES\",\r\n\tFI: \"FI\",\r\n\tFR: \"FR\",\r\n\tGB: \"GB\",\r\n\tIE: \"IE\",\r\n\tIR: \"IR\",\r\n\tNO: \"NO\",\r\n\tNL: \"NL\",\r\n\tNZ: \"NZ\",\r\n\tTR: \"TR\",\r\n\tUS: \"US\"\r\n  };\r\n  \r\n  export const NATIONALITY_HUMAN_NAME = {\r\n\t  [NATIONALITY.AU]: \"Australian\",\r\n\t  [NATIONALITY.BR]: \"Brazilian\",\r\n\t  [NATIONALITY.CA]: \"Canadian\",\r\n\t  [NATIONALITY.CH]: \"Chinese\",\r\n\t  [NATIONALITY.DE]: \"German\",\r\n\t  [NATIONALITY.DK]: \"Danish\",\r\n\t  [NATIONALITY.ES]: \"Spanish\",\r\n\t  [NATIONALITY.FI]: \"Finn\",\r\n\t  [NATIONALITY.FR]: \"French\",\r\n\t  [NATIONALITY.GB]: \"British\",\r\n\t  [NATIONALITY.IE]: \"Irish \",\r\n\t  [NATIONALITY.IR]: \"Iranian\",\r\n\t  [NATIONALITY.NO]: \"Norwegian\",\r\n\t  [NATIONALITY.NL]: \"Netherlander\",\r\n\t  [NATIONALITY.NZ]: \"New Zealander\",\r\n\t  [NATIONALITY.TR]: \"Turkish\",\r\n\t  [NATIONALITY.US]: \"American\"\r\n  \r\n  }\r\n  export const NATIONALITY_HUMAN_COLOR = {\r\n\t  [NATIONALITY.AU]: \"red\",\r\n\t  [NATIONALITY.BR]: \"pink\",\r\n\t  [NATIONALITY.CA]: \"mediumpurple\",\r\n\t  [NATIONALITY.CH]: \"cyan\",\r\n\t  [NATIONALITY.DE]: \"yellow\",\r\n\t  [NATIONALITY.DK]: \"mistyrose\",\r\n\t  [NATIONALITY.ES]: \"magenta\",\r\n\t  [NATIONALITY.FI]: \"orange\",\r\n\t  [NATIONALITY.FR]: \"olive\",\r\n\t  [NATIONALITY.GB]: \"teal\",\r\n\t  [NATIONALITY.IE]: \"violet\",\r\n\t  [NATIONALITY.IR]: \"plum\",\r\n\t  [NATIONALITY.NO]: \"peru\",\r\n\t  [NATIONALITY.NL]: \"cadetblue\",\r\n\t  [NATIONALITY.NZ]: \"brown\",\r\n\t  [NATIONALITY.TR]: \"silver\",\r\n\t  [NATIONALITY.US]: \"goldenrod\"\r\n  \r\n  }","import { runInAction, makeAutoObservable } from \"mobx\";\r\nimport { GENDER, DATA_VIEW_MODE } from \"../constants\";\r\n\r\nclass Store {\r\n  //users\r\n  users = [];\r\n  isLoading = true;\r\n  isError = false;\r\n  //filter\r\n  filter = {\r\n    searchText: \"\",\r\n    gender: GENDER.ALL,\r\n    nationality: \"\",\r\n  };\r\n  //dataviewmode\r\n  dataViewMode = localStorage.getItem(\"dataViewMode\") || DATA_VIEW_MODE.TABLE;\r\n  //currentpage\r\n  currentPage = 1;\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  getContacts = async () => {\r\n    try {\r\n      this.isLoading = true;\r\n      const response = await fetch(\"https://randomuser.me/api/?results=50\");\r\n      const { results, error } = await response.json();\r\n      if (error) {\r\n        console.log(error);\r\n        throw new Error();\r\n      }\r\n      runInAction(() => {\r\n        this.users = results;\r\n        this.isError = false;\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => (this.isError = true));\r\n    } finally {\r\n\t  runInAction(() => (this.isLoading = false))}}\r\n\t  \r\n\tsetCurrentPage(page) {this.currentPage = page};\r\n\tsetSearchText(text) {this.filter.searchText = text};\r\n\tsetGender(gender) {this.filter.gender = gender}\r\n\tsetNat(nat) {this.filter.nationality = nat}\r\n}\r\n\r\nexport default new Store();\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\nimport {\r\n  NATIONALITY_HUMAN_NAME,\r\n  NATIONALITY_HUMAN_COLOR,\r\n} from \"../../../constants\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport store from '../../../store'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {},\r\n  row: { \"&>*:not(img)\": { padding: theme.spacing(1/2) , marginLeft:theme.spacing(1) } },\r\n  small: {\r\n    width: theme.spacing(5),\r\n    height: theme.spacing(5),\r\n    borderRadius: \"50%\",\r\n  },\r\n  name: {\r\n    color: \"dodgerBlue\",\r\n  },\r\n  nat: {\r\n    cursor: \"pointer\",\r\n  },\r\n}));\r\n\r\nexport const ContactsTable = ({ data }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"contacts table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Avatar</TableCell>\r\n            <TableCell>Full name</TableCell>\r\n            <TableCell>Birthday</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Phone</TableCell>\r\n            <TableCell>Location</TableCell>\r\n            <TableCell>Nationality</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((item) => (\r\n            <TableRow key={item.login.uuid} className={classes.row}>\r\n              <TableCell>\r\n                <img\r\n                  className={classes.small}\r\n                  alt=\"\"\r\n                  src={item.picture.thumbnail}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography className={classes.name}>\r\n                  {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>\r\n                  {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}{\" \"}\r\n                </Typography>\r\n                <Typography>{`${item.dob.age} years`}</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.email} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext text={item.phone} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardtext\r\n                  blackcolor={true}\r\n                  text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`}\r\n                />\r\n              </TableCell>\r\n              <TableCell align=\"right\" className={classes.nat}>\r\n                <Button\r\n                  onClick={() =>\r\n                    (store.filter.nationality =\r\n                      NATIONALITY_HUMAN_NAME[item.nat])\r\n                  }\r\n                  style={{ backgroundColor: NATIONALITY_HUMAN_COLOR[item.nat] }}\r\n                >\r\n                  {NATIONALITY_HUMAN_NAME[item.nat]}\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport store from \"../../../store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { GENDER } from \"../../../constants\";\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  input_item: { maxHeight:theme.spacing(5) ,minWidth: theme.spacing(40), width: \"100%\" },\r\n  clear_btn: {\r\n    width: \"100%\",\r\n    height: theme.spacing(5),\r\n  },\r\n  paper: {\r\n\twidth: \"100%\",\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n//body\r\nexport const SearchPanel = observer(() => {\r\n  const classes = useStyles();\r\n  const { filter } = store;\r\n  return (\r\n    <Grid container className={classes.root}>\r\n      <Paper  className={classes.paper}>\r\n        <Grid container spacing={3}>\r\n          {/* поиск по имени */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n              size=\"small\"\r\n              value={filter.searchText}\r\n              onChange={e => store.setSearchText(e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Search by full name\"\r\n              endAdornment={<InputAdornment>\r\n                \t\t\t  <SearchIcon />\r\n                \t\t\t</InputAdornment>}/>\r\n          </Grid>\r\n          {/* выбор пола */}\r\n          <Grid item xs={12} sm={12} md={6} xl={4} >\r\n            <FormControl variant=\"outlined\"className={classes.input_item} >\r\n              <InputLabel id=\"gender\">Gender</InputLabel>\r\n              <Select className={classes.input_item}\r\n                id=\"gender\"\r\n                label=\"gender\"\r\n\t\t\t\tvalue={filter.gender}\r\n                onChange={e => store.setGender(e.target.value)}\r\n              >\r\n                <MenuItem  value={GENDER.ALL}>All</MenuItem>\r\n                <MenuItem  value={GENDER.MALE}>Male</MenuItem>\r\n                <MenuItem  value={GENDER.FEMALE}>Female</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          {/* поиск по национальности*/}\r\n          <Grid item xs={12} sm={12} md={6} xl={4}>\r\n            <OutlinedInput\r\n              value={filter.nationality}\r\n              onChange={e => store.setNat(e.target.value)}\r\n              className={classes.input_item}\r\n              placeholder=\"Nationality\"\r\n            />\r\n          </Grid>\r\n          {/* кнопка очистки инпутов */}\r\n          <Button\r\n            size=\"small\"\r\n            className={classes.clear_btn}\r\n\t\t\tonClick={() => {store.setSearchText(\"\");\r\n\t\t\t\t\t\t\tstore.setGender(GENDER.ALL);\r\n\t\t\t\t\t\t\tstore.setNat(\"\")}}>\r\n            Clear\r\n          </Button>\r\n          {/* закрывающие теги */}\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n});\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { CopyToClipboardtext } from \"../../../components/CopyToClipboardText\";\r\n\r\nimport {NATIONALITY_HUMAN_COLOR, NATIONALITY_HUMAN_NAME,} from \"../../../constants\";\r\n\r\nimport store from '../../../store'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    whiteSpace: \"pre-line\",\r\n    minHeight: theme.spacing(20),\r\n    textAlign: \"center\",\r\n    marginTop: theme.spacing(1) ,\r\n  },\r\n  large: {\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n    alignItems: \"center\",\r\n    borderRadius: \"50%\",\r\n  },\r\n}));\r\nexport const ContactsCards = ({ data }) => {\r\n  const classes = useStyles();\r\n  return (\r\n\r\n    <Grid container className={classes.card}>\r\n      {data.map((item) => (\r\n        <Grid item xs={12} lg={3} sm={6} key={item.login.uuid}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent>\r\n              <img\r\n                alt=\"\"\r\n                src={item.picture.thumbnail}\r\n                className={classes.large}\r\n              />\r\n              <Typography>\r\n                {`${item.name.title} ${item.name.first} ${item.name.last}`}\r\n              </Typography>\r\n              <Button\r\n                className={classes.nat}\r\n                onClick={() =>\r\n                  (store.filter.nationality =\r\n                    NATIONALITY_HUMAN_NAME[item.nat])\r\n                }\r\n                style={{ backgroundColor: NATIONALITY_HUMAN_COLOR[item.nat] }}\r\n              >\r\n                {NATIONALITY_HUMAN_NAME[item.nat]}\r\n              </Button>\r\n              <Typography>\r\n                {format(parseISO(item.dob.date), \"MM/dd/yyyy\")}\r\n              </Typography>\r\n              <Typography>{`${item.dob.age} years`}</Typography>\r\n              <Typography>\r\n                <CopyToClipboardtext text={item.email} />{\" \"}\r\n              </Typography>\r\n              <CopyToClipboardtext text={item.phone} />\r\n              <Typography>\r\n                <CopyToClipboardtext\r\n                  blackcolor={true}\r\n                  text={`/${item.location.country}/ \r\n\t\t\t   ${item.location.street.name} ${item.location.street.number}`}\r\n                />\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n","import ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport { DATA_VIEW_MODE } from \"../../../constants\";\r\nimport { useEffect } from \"react\";\r\nimport store from '../../../store'\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport const ToggleDataViewMode = observer( () => {\r\n\t\r\n  //body\r\n  useEffect(() => {\r\n\tlocalStorage.setItem('dataViewMode',store.dataViewMode) \r\n}, []);\r\n\r\n  return (\r\n    <ToggleButtonGroup size='small'\r\n      orientation=\"horizontal\"\r\n\t  value={store.dataViewMode}\r\n\t  exclusive\r\n      onChange={  (_, nextView) => {if (nextView) \r\n\t\tstore.dataViewMode = nextView}}\r\n    >\r\n\t\t\t  <ToggleButton\r\n        value={DATA_VIEW_MODE.TABLE}\r\n\t\taria-label={DATA_VIEW_MODE.TABLE}\r\n      >\r\n        <ViewListIcon />\r\n      </ToggleButton>\r\n      <ToggleButton\r\n\t\tvalue={DATA_VIEW_MODE.GRID}\r\n        aria-label={DATA_VIEW_MODE.GRID}\r\n      >\r\n        <ViewModuleIcon />\r\n      </ToggleButton>\r\n\r\n    </ToggleButtonGroup>\r\n  );\r\n}\r\n)\r\n","import RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport store from \"../../../store\";\r\nimport { ToggleDataViewMode } from \"../ToggleDataViewMode\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    headContainer: {\r\n      marginTop: theme.spacing(2),\r\n\t},\r\n\trefresh_button: {\r\n\t\tmarginRight: theme.spacing(1),\r\n\t  },\r\n  })\r\n);\r\nexport const Header = () => {\r\n\tconst classes = useStyles();\r\n  const { getContacts } = store;\r\n  return (\r\n    <Grid item xs={12}\r\n      className={classes.headContainer} >\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          Contacts\r\n        </Typography>\r\n        <Box display=\"flex\">\r\n          <IconButton\r\n            className={classes.refresh_button}\r\n            aria-label=\"refresh\"\r\n            onClick={() => getContacts()}\r\n          >\r\n            <RefreshIcon />\r\n          </IconButton>\r\n          <ToggleDataViewMode />\r\n        </Box>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n};\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { ContactsTable } from \"./ContactsTable\";\r\nimport { DATA_VIEW_MODE } from \"../../constants\";\r\nimport { SearchPanel } from \"./SearchPanel\";\r\n\r\nimport store from \"../../store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ContactsCards } from \"./ContactsCards\";\r\nimport {Header} from './Header'\r\nimport {useFilter} from './useContacts'\r\n// styles\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    root: {\"&>*\" : { justifyContent:'center' }},\r\n    headContainer: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  })\r\n);\r\n//body\r\nexport const Contacts = observer(() => { \r\n\r\n\r\n  const classes = useStyles();\r\n  const {isLoading, isError , dataViewMode , currentPage } = store;\r\n  const [currentUsers,pagesCount,handleChange] = useFilter ()\r\n\r\n  \r\n//render\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Grid container>\r\n      <Header />\r\n        <Grid item xs={12}>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <SearchPanel />\r\n          </Box>\r\n        </Grid>\r\n\t\t<Pagination  page={currentPage} onChange={handleChange} count={pagesCount} />\r\n        <Grid item xs={12}>\r\n          {(() => { \r\n            if (isLoading) { return <LinearProgress />;}\r\n            if (isError) { return <div> Fetch Error </div>  ;}\r\n            if (dataViewMode === DATA_VIEW_MODE.TABLE) { return <ContactsTable data={currentUsers} />;}\r\n            if (dataViewMode === DATA_VIEW_MODE.GRID) { return <ContactsCards data={currentUsers} />;}\r\n            return \"error\";\r\n          })()}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n});\r\n","\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../constants\";\r\nimport store from \"../../store\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport const useFilter = () => {\r\n\r\nconst {users ,filter , currentPage } = store\r\n// фильтр по полу,национальности,имени\r\nconst filteredUsers = users\r\n  .filter((user) => filter.gender === \"all\" || user.gender === filter.gender)\r\n  .filter((user) => { if ((user.name.first + \" \" + user.name.last).toLowerCase().includes(filter.searchText.toLowerCase())) return true;\r\n\treturn false;})\r\n  .filter((user) => { if (NATIONALITY_HUMAN_NAME[user.nat].toLowerCase().includes(filter.nationality.toLowerCase())) return true;\r\n\treturn false;\r\n})\r\n// фильтр по страницам\r\nconst pageSize = 8;\r\nconst pagesCount = Math.ceil(filteredUsers.length/pageSize)\r\nconst indexOfLastPage = currentPage * pageSize\r\nconst indexOfFistPage = indexOfLastPage - pageSize\r\nconst currentUsers = filteredUsers.slice(indexOfFistPage,indexOfLastPage)\r\n//сброс на первую страницу,если изменился фильтр\r\nuseEffect(()=> {\r\n\tstore.setCurrentPage(1)\r\n},[filter.searchText,filter.gender,filter.nationality])\r\n// фетч при первом рендере\r\nuseEffect(() => {\r\n\tstore.getContacts();\r\n  }, []);\r\n// хендер изменения номера страницы\r\n  const handleChange = (_, value) => {\r\n\tstore.setCurrentPage(value)\r\n  };\r\n\r\nreturn [currentUsers,pagesCount,handleChange]\r\n}","import {Contacts} from \"./pages/Contacts\";\r\n\r\nexport function App() {\r\n  return (\r\n    <div>\r\n\t\r\n      <Contacts/>\r\n\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\nreportWebVitals();\r\n"],"sourceRoot":""}